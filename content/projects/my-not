---
title: "My Notes"
date: 2025-04-06
summary: "A Java-based note-taking application focusing on simplicity and extensibility."
tags: ["Java", "OOP", "Gradle", "Note-taking", "JavaFX"]
images: ["projects/mynotes/ui-demo.png", "projects/mynotes/code-snapshot.png"]
type: post
ShowPostNavLinks: true
showTableOfContents: true
draft: false
weight: 26
---

## Introduction

**My-Notes** is a lightweight, Java-based application aimed at simplifying note management. Built with **Gradle** and following object-oriented design principles, it allows users to create and view notes through a minimalistic UI or CLI interface.

Though simple, this project showcases solid fundamentals in Java and is ideal for students or beginners to understand application structure, error handling, and future extensibility.

## Key Features and Functionality

### Core Features

- **Creating Notes**: Users can input and save notes through the interface.  
- **Viewing Notes**: Notes are displayed back via a simple listing format.

This minimal structure makes the app ideal for experimentation and learning.

### Example Code: Core Functionality

```java
public class NoteManager {
    private List<String> notes = new ArrayList<>();

    public void addNote(String note) {
        if (note == null || note.isEmpty()) {
            System.out.println("Please Enter Description!");
        } else {
            notes.add(note);
            System.out.println("Note added successfully!");
        }
    }

    public void displayNotes() {
        if (notes.isEmpty()) {
            System.out.println(" ");
        } else {
            System.out.println("Your Notes:");
            for (String note : notes) {
                System.out.println("- " + note);
            }
        }
    }
}
```

- `addNote`: Validates and adds the input to the notes list.
- `displayNotes`: Prints the stored notes, or notifies if none exist.

## Project Structure

```
My-Notes/
├── build.gradle.kts
├── gradle/
├── gradlew / gradlew.bat
├── settings.gradle.kts
├── app/
│   └── NoteManager.java
└── .idea/ (IDE metadata)
```

## Code Flow

### Initialization ⚙️
The app starts with Gradle setup and dependency configuration.

### Note Input ✍️
Notes are entered via the UI or command line.

### Storage 🧠
Notes are temporarily stored in memory (`List<String>`).

### Example Main Class

```java
public class MyNotesApp {
    public static void main(String[] args) {
        NoteManager manager = new NoteManager();
        manager.addNote("Finish Java project.");
        manager.displayNotes();
    }
}
```

## Error Handling 🚧

The app handles:

### Empty Note Prevention

```java
if (note == null || note.trim().isEmpty()) {
    System.out.println("Cannot save an empty note!");
    return;
}
```

### Viewing Notes When Empty
Gracefully informs the user if no notes exist.

## UI Design 🖥️

The current UI is CLI-based or basic GUI. A future version could use JavaFX for improved interactivity.

```java
Label label = new Label("Enter your note:");
TextField textField = new TextField();
Button saveButton = new Button("Save Note");
```

## Example Scenarios 📌

### Adding a Note
**Input:**  
`Buy groceries`

**Output:**  
`Note added successfully!`

### Viewing Notes
**Output:**
```
- Buy groceries
- Finish Java project.
```

## Future Improvements 🚀

### Persistent Storage

```java
try (BufferedWriter writer = new BufferedWriter(new FileWriter("notes.txt", true))) {
    writer.write(note + "\n");
} catch (IOException e) {
    e.printStackTrace();
}
```

### Planned Features

- File/database-backed storage
- Tagging, filtering, and search
- Cloud sync and export options
- JavaFX-based GUI
- Real-time text preview and formatting

## Conclusion ✅

**My-Notes** is a clean, minimal Java project that offers excellent educational value. It introduces Java basics, project structure, and application flow in a simple and digestible format. As future features are added, this can evolve into a powerful note-taking utility suitable for personal and academic use.

